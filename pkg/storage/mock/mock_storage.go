// Code generated by MockGen. DO NOT EDIT.
// Source: storage.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	storage "github.com/reddtsai/goREPL/pkg/storage"
)

// MockIStorage is a mock of IStorage interface.
type MockIStorage struct {
	ctrl     *gomock.Controller
	recorder *MockIStorageMockRecorder
}

// MockIStorageMockRecorder is the mock recorder for MockIStorage.
type MockIStorageMockRecorder struct {
	mock *MockIStorage
}

// NewMockIStorage creates a new mock instance.
func NewMockIStorage(ctrl *gomock.Controller) *MockIStorage {
	mock := &MockIStorage{ctrl: ctrl}
	mock.recorder = &MockIStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIStorage) EXPECT() *MockIStorageMockRecorder {
	return m.recorder
}

// AddFile mocks base method.
func (m *MockIStorage) AddFile(arg0, arg1, arg2, arg3 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddFile", arg0, arg1, arg2, arg3)
}

// AddFile indicates an expected call of AddFile.
func (mr *MockIStorageMockRecorder) AddFile(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFile", reflect.TypeOf((*MockIStorage)(nil).AddFile), arg0, arg1, arg2, arg3)
}

// AddFolder mocks base method.
func (m *MockIStorage) AddFolder(arg0, arg1, arg2 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddFolder", arg0, arg1, arg2)
}

// AddFolder indicates an expected call of AddFolder.
func (mr *MockIStorageMockRecorder) AddFolder(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFolder", reflect.TypeOf((*MockIStorage)(nil).AddFolder), arg0, arg1, arg2)
}

// AddUser mocks base method.
func (m *MockIStorage) AddUser(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddUser", arg0)
}

// AddUser indicates an expected call of AddUser.
func (mr *MockIStorageMockRecorder) AddUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockIStorage)(nil).AddUser), arg0)
}

// DeleteFile mocks base method.
func (m *MockIStorage) DeleteFile(arg0, arg1, arg2 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteFile", arg0, arg1, arg2)
}

// DeleteFile indicates an expected call of DeleteFile.
func (mr *MockIStorageMockRecorder) DeleteFile(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFile", reflect.TypeOf((*MockIStorage)(nil).DeleteFile), arg0, arg1, arg2)
}

// DeleteFolder mocks base method.
func (m *MockIStorage) DeleteFolder(arg0, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteFolder", arg0, arg1)
}

// DeleteFolder indicates an expected call of DeleteFolder.
func (mr *MockIStorageMockRecorder) DeleteFolder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFolder", reflect.TypeOf((*MockIStorage)(nil).DeleteFolder), arg0, arg1)
}

// IsExistFile mocks base method.
func (m *MockIStorage) IsExistFile(arg0, arg1, arg2 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExistFile", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsExistFile indicates an expected call of IsExistFile.
func (mr *MockIStorageMockRecorder) IsExistFile(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExistFile", reflect.TypeOf((*MockIStorage)(nil).IsExistFile), arg0, arg1, arg2)
}

// IsExistFolder mocks base method.
func (m *MockIStorage) IsExistFolder(arg0, arg1 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExistFolder", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsExistFolder indicates an expected call of IsExistFolder.
func (mr *MockIStorageMockRecorder) IsExistFolder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExistFolder", reflect.TypeOf((*MockIStorage)(nil).IsExistFolder), arg0, arg1)
}

// IsExistUser mocks base method.
func (m *MockIStorage) IsExistUser(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExistUser", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsExistUser indicates an expected call of IsExistUser.
func (mr *MockIStorageMockRecorder) IsExistUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExistUser", reflect.TypeOf((*MockIStorage)(nil).IsExistUser), arg0)
}

// ListFile mocks base method.
func (m *MockIStorage) ListFile(arg0, arg1, arg2, arg3 string) []storage.VirtualFileSysFileEntity {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFile", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]storage.VirtualFileSysFileEntity)
	return ret0
}

// ListFile indicates an expected call of ListFile.
func (mr *MockIStorageMockRecorder) ListFile(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFile", reflect.TypeOf((*MockIStorage)(nil).ListFile), arg0, arg1, arg2, arg3)
}

// ListFolder mocks base method.
func (m *MockIStorage) ListFolder(arg0, arg1, arg2 string) []storage.VirtualFileSysEntity {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFolder", arg0, arg1, arg2)
	ret0, _ := ret[0].([]storage.VirtualFileSysEntity)
	return ret0
}

// ListFolder indicates an expected call of ListFolder.
func (mr *MockIStorageMockRecorder) ListFolder(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFolder", reflect.TypeOf((*MockIStorage)(nil).ListFolder), arg0, arg1, arg2)
}

// RenameFolder mocks base method.
func (m *MockIStorage) RenameFolder(arg0, arg1, arg2 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RenameFolder", arg0, arg1, arg2)
}

// RenameFolder indicates an expected call of RenameFolder.
func (mr *MockIStorageMockRecorder) RenameFolder(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameFolder", reflect.TypeOf((*MockIStorage)(nil).RenameFolder), arg0, arg1, arg2)
}
